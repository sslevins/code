#include <list>

构造函数和析构函数
list<Elem> c				产生一个空的list
list<Elem> c1(c2)			产生一个与c2同型的list（每个元素都被复制）
list<Elem> c(n)				产生拥有n个元素的list
list<Elem> c(n, elem)		产生拥有n个元素的list，每个元素都是elem的副本
list<Elem> c(beg, end)		产生一个list并以[beg, end]区间内的元素为初值
c.~list<Elem>()				销毁所有元素，释放内存


非变动性操作
c.size()					返回元素个数
c.empty()					判断容器大小是否为零。等同于size()==0
c.max_size()				返回元素的最大可能数量
c1 == c2					判断是否c1等于c2
c1 != c2					判断是否c1不等于c2


赋值操作
c1 = c2						将c2的全部元素赋值给c1
c.assign(n, elem)			将elem的n个拷贝复制给c
c.assign(beg, end)			将区间[beg, end]的元素赋值给c
c1.swap(c2)					将c1和c2的元素互换
swap(c1, c2)				同上，为全局函数


直接存取
c.front()					返回第一个元素
c.back()					返回最后一个元素


插入、删除
c.insert(pos, elem)			在迭代器pos所指位置上插入一个elem的副本
c.insert(pos, n, elem)		在迭代器pos所指位置上插入n个elem的副本
c.insert(pos, beg, end)		在迭代器pos所指位置上插入[beg, end]区间所有元素的副本

c.push_back(elem)			在尾部追加一个elem副本
c.pop_back()				移除最后一个元素
c.push_front(elem)			在头部插入一个elem副本
c.pop_front()				移除第一个元素（但不返回）

c.remove(val)				删除所有值为val的元素
c.remove_if(op)				删除所有“造成op(elem)结果为true”的元素
c.erase(pos)				删除迭代器所指向元素
c.erase(beg, end)			删除区间[ben, end]内所有元素
c.resize(num)				将元素容量变为num。如果size()变大，则以default构造函数构造所有新增元素
c.resize(num, elem)			将元素容量变为num。如果size()变大，则以elem副本作为新增元素的初始值
c.clear()					删除全部元素，将整个容器清空


迭代器相关函数
c.begin()					返回一个双向迭代器，只想第一个元素
c.end()						返回一个双向迭代器，只想最后元素的下一位置
c.rbegin()					返回一个逆向迭代器，指向逆向迭代的第一个元素
c.rend()					返回一个逆向迭代器，指向逆向迭代的元素的下一位置


特殊变动性操作
c.unique()					如果存在若干相邻而数值相等的元素，移除重复的，只留下一个。
c.unique(op)				如果存在相邻元素，都使op()的结果为true, 则移除重复的，只留下一个。
c1.splice(pos, c2)			将c2内的所有元素的都移到c1之内、迭代器pos之前。
c1.splice(pos, c2, c2pos)	将c2内c2pos所指的元素移到c1内的pos所指位置上
c1.splice(pos, c2, 
			c2beg, c2end)	将c2内的[beg, end]区间内所有元素转移到c1内的pos之前
c.sort()					以operator< 为准则，对所有元素排序
c.sort(op)					以op()为准则，对所有元素排序
c1.merge(c2)				假设c1和c2有序，将c2的全部元素转移到c1，并保证合并后的list仍有序
c1.merge(c2, op)			假设c1和c2在op()原则下有序，将c2的全部元素转移到c1，并保证合并后，list仍在op()原则下有序。
c.reverse()					将所有元素反序





