    C 有很多运算符，例如今天讨论内的赋值和算术运算符。总的来说，一个运算符作用于一个或多个操作数来产生一个值。带一个操作数的运算符（例如符号）称为一元运算符。要求两个操作数的运算符（例如加法运算符）称为二元运算符。
    表达式是运算符和操作数的组合。在 C 里，每一个表达式都有一个值，其中包括赋值表达式和比较表达式。运算符优先级的规则帮助决定当对表达式进行求值时，如何组合表达式里的各项。当两个运算符共享一个操作数时，具有较高优先级的运算符先被运算。如果运算符有相同的优先级，结合性（从左到右或从右到左）决定了哪个运算符先被应用。
    语句是对计算机的完整指示，在 C 中通过一个分号来标示。到目前，你已经使用了声明语句、赋值语句、函数调用语句和控制语句。包含在一对花括号里的语句构成了一个符合语句或者代码块。
    在 C 里，许多类型转换会自动发生。当 char 和 short 类型出现在表达式里或者作为函数的参数时，它们都将被提升为 int 类型。当 float 类型作为一个函数参数时被提升为 double 类型。当把一种类型的值赋给另一种类型的变量是，该值会被转换成和那个变量相同的类型。当较大类型的值被转换成较小类型的值（例如，long 变成 short，或者 double 变成 float）时，它们可能丢失数据。根据今天概括的规则，在混合类型的算数运算的情况下，较小的类型被转换成较大的类型。
    当你定义了一个接受一个参数的函数时，你在函数声明里声明了一个变量，或称形式参数。然后在函数调用中传入的值会赋给这个变量，现在就可以在函数里使用该值了。

key:
    C 使用运算符来提供多种服务。每个运算符的特性包括所需操作数的数量、优先级和结合性。当两个运算符共享一个操作数是，最后两个特性决定了先运算哪一个运算符。运算符与值的结合可以产生表达式，并且 C 的每一个表达式都有一个值。如果你不了解运算符的优先级和结合性，你可能会构造出不合法的或者是与你期望的值不同的表达式。
    C 允许你写出将不同的数值类型组合在一起的表达式。但是算数运算要求操作数是统一类型的，所以 C 进行自动转换。然而，不依赖于自动转换是一个很好的编程习惯。你因该通过选择变量的正确类型或通过使用类型指派来使类型选择更明显。那样你就不必担心出现你不希望的自动转换。
