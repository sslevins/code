    今天给出了相当多的回顾的主题，那么让我们来看看。if 语句利用判断条件来控制程序是否执行紧跟在判断条件后的一个简单语句或代码块。如果判断表达式为非零值，执行语句；如果为零值，则不执行语句。if else 语句使你能够从两个选项中进行选择。如果判断套件为非零值，就执行 else 之前的语句。如果判断表达式的结果为零值，执行紧跟在 else 之后的语句。通过紧跟在 else 语句只有使用另一个 if 语句，可以建立在一系列可供选择的食物中进行选择的结构。
    判断条件通常是一个关系表达式，也就是用一个关系运算符构成的表达式，例如 < 或者 == 。利用 C 的逻辑运算能力，可以组合多个关系表达式以创建更复杂的判断。
    使用条件运算符（ ? : ）可以产生一个表达式，这样的表达式在多数情况下比if else 语句提供更为简洁的二选一。
    switch 语句使你能够从一些列以整数值作为标签的语句中进行选择。如果紧跟在 switch 关键字后的判断条件的整数值与某标签想匹配，执行就定位到该标签定位的语句。然后执行继续完成紧跟在该标签语句后的语句，知道遇到一个 break 语句。
    break、continue 和 goto 是跳转语句，导致程序流程跳转到程序的其他位置。break 语句导致程序跳转到紧跟在包含它的循环或 switch 末尾的下一条语句。continue 语句导致程序跳过包含它的循环的剩余部分，开始下一循环周期。

    智能的一个体现方面是根据环境调节反映的能力。所以，选择语句是开发具体只能行为程序的基础。在 C 中，if、if else 和 switch 语句，连同条件运算符（?:）一起实现了选择。
    if 和 if else 语句使用一个判断条件来决定执行哪条语句。任何非零值被视为 true，零值被视为 false。典型地，判断包括关系表达式（它比较两个值）以及逻辑表达式（它使用逻辑运算符组合或更改其他表达式）。
    需要牢记的一条通用规则是，如果想要判断两个条件，应该使用逻辑运算符将两个完整的判断表达式连接起来。例如，一下两个尝试是作物的：
    if (a < x < y)		// 错误。没有逻辑运算符
    ...
    if (ch != 'q' && != 'Q')	// 错误。缺少完整的判断
    ...
    记住，正确的方法是用逻辑运算符将两个关系表达式连接起来：
    if (a < x && x < z)		// 使用 && 组合两个表达式
    ...
    if (ch != 'q' && ch != 'Q')	// 使用 && 组合两个表达式
    ...
    最近两天所介绍的控制语句使你能够处理比这之前所处理的更强大和更具有挑战性的程序。



