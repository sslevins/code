    今天的主要话题是程序控制。C 为实现程序的结构花提供了很多帮助。while 和 for 语句提供了入口条件循环，for 语句特别适合那些包含有初始化和更新的循环。逗号运算符使你可以在一个 for 循环中初始化和更新多个变量。在不多的场合中也需要推出条件循环，C 的 do while 语句就是一个推出条件循环。
    典型的 while 循环设计看上去就像这样：

    获得第一个值
    while (值满足条件时)
    {
    	其他代码
	获得下一个值
    }

    而做同样工作的 for 循环看上去就像这样：

    for (获得第一个值；值满足条件时；获得下一个值)
    	其他代码

    所有这些循环都使用一个判断条件来决定是否执行另一个循环周期。一般地说，如果判断表达式等于一个非零值，循环就继续执行；否则它就结束。判断条件通常是一个关系表达式，即一个由关系运算符构成的表达式。如果关系为真，表达式的值就为1，否则就为0。C99 引入了_Bool 类型的变量，这种变量只能具有值 1 或 0，分别表示真或假。
    除了关系运算符，今天还介绍了一些 C 的算术赋值运算符，例如 += 和 *= 。这些运算符通过对左边的操作数执行算数运算来修改它的值。
    接下来我们简单介绍了数组。数组的声明使用放括号，括号中的值说明元素的个数。数组的第一个元素的索引编号为0， 第二个为1， 一直这样下去。例如，下列声明：
    double hippos[20];
    创建了一个具有 20 个元素的数组，单个的元素从 hippos[0] 到 hippos[19]。可以通过循环方便地使用为数组进行编号的下标。
    最后，今天介绍了如何编写和使用具有返回值的函数。


key:
    循环是一个强大的编程工具。在建立循环时应该特别注意三个方面：
    1. 明确定义结束循环的条件。
    2. 确保循环判断中使用的值在第一次使用之前已经初始化。
    3. 确保循环在每个周期中更型了判断值。
    C 通过数值计算来处理判断条件。结果为 0 表示假，任何其他值都是真。使用了关系运算符的表达式通常被用来进行判断，它们有点特殊。如果为真，关系表达式的值是1，为假则为0，这与新的 _Bool 类型所允许的值保持一致。
    数组由相同类型的邻近的内存位置组成。你需要谨记数组元素是从 0 开始编号的，这样最后一个元素的下标就比元素的个数少 1。C 并不检查你是否使用了合法的下标值，所有这需要由你自己来负责。
    使用一个函数需要完成三个单独的步骤：
    1. 使用函数原型声明该函数。
    2. 在程序中通过函数调用来使用该函数。
    3. 定义函数。
    原型使编译器可以检查你是否正确地使用了函数，而定义则规定了函数如何工作。现代的编程习惯是把程序的元素分成接口和实现部分，原型和定义就是这样的例子。接口部分描述了如何使用一个特性，这正式原型所做的；而实现部分说明了采取的具体动作，这正式定义所做的。
