gcc -E test.c -o test.i		// 预处理 / 预编译
gcc -S test.i -o test.s		// 编译
gcc -c test.s -o test.o		// 汇编
gcc test.o -o test		// 链接

*.c --> *.i --> *.s --> *.o --> a.out
 
objdump -h main.o 
objdump -x -s -d main.o 

bss段：（存在于a.out文件中，a.out加载至内存执行时，在内存中也存在）
    BSS段（bsssegment）通常是指用来存放程序中未初始化的全局变量的一块内存区域。BSS是英文BlockStarted by Symbol的简称。BSS段属于静态内存分配。

data段：（存在于a.out文件中，a.out加载至内存执行时，在内存中也存在）
    数据段（datasegment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。

text段：（存在于a.out文件中，a.out加载至内存执行时，在内存中也存在）
    代码段（codesegment/textsegment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读,某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。

rodata段：（存在于a.out文件中，a.out加载至内存执行时，在内存中也存在）
    存放C中的字符串和#define定义的常量

常量段：（存在于a.out文件中，a.out加载至内存执行时，在内存中也存在）
    常量段一般包含编译器产生的数据（与只读段包含用户定义的只读数据不同）。比如说由一个语句a=2+3 编译器把2+3编译期就算出5，存成常量5在常量段中


heap堆：（a.out加载至内存执行时，才存在）
    堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）

stack栈：（a.out加载至内存执行时，才存在）
    是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。

三个特殊的伪段：
UNDEF	用于未定义符号
ABS		用于不可重定位的绝对符号
COM		一旦被分配空间后，COM中的符号会被转移到bss段中
