    C 的结构提供了在一个数据对象中存储几个通常是不同类型的数据项的方法。可以使用标记来代表一个具体的结构模板，并声明该结构体类型的变量。成员（.）运算符使你可以通过使用结构模板中的标签来访问结构的各个成员。
    如果有一个指向结构的指针，可以使用该指针以及间接成员运算符（->）代替名字和点运算符来访问结构的各个成员。要得到结构的地址，可以使用运算符 &。与数组不同，结构名不是结构的地址。
    传统上，和结构体有关的函数使用指向结构的指针作为参数。现在的 C 允许把结构作为参数传递、把结构作为返回值，并允许把一个结构赋值给另一个相同类型的结构。
    联合使用与结构相同的语法。但是，联合成员共享一个公共的存储空间。联合存储其选项列表中的一个单独的数据类型，而不像结构那样同时存储多个数据类型。也就是说，如果一个结构体可以保存一个 int 型、一个 double 型以及一个 char 型数据，那么相应的联合能保存一个 int 型、或者一个 double 型，或者一个 char 型的数据。
    枚举使得你可以创建一组代表整数常量的符号（枚举常量），也允许你定义相关联的枚举类型。
    typedef 工具可用来建立 C 标准类型的别名或者速记表示。
    一个函数的名称给出该函数的地址。这个指向函数的地址可以作为参数被传递给使用该函数的另一个函数。如果 pdf 是一个函数指针，并且已经给它赋了一个特定函数的地址，可以用两种方式调用该函数：
    #include <math.h> 	/* 声明 double sin(double) 函数 */
    ...
    double (*pdf)(double);
    double x;
    x = (*pdf)(1, 2); 	// 调用 sin(1, 2);
    x = pdf(1, 2);	// 同样，调用 sin(1, 2);


key:

    表示一个编程问题所需的信息通常要比一个或多个数字更为复杂。程序可能会处理具体有多个属性的实体或实体集合。例如，表示一个客户需要他的姓名、地址、电话号码以及其他信息：表示一个歌曲MP3可以用它的标题、演唱者、播放时间、价格等等。C 的结构使你可以在一个单独的单元中集中收集这些信息。这对组织一个程序非常有用，因为这样可以把所有相关的信息存储在一个地方，而不是存储在分散的多个变量中。
    在设计一个结构时，开发一个与之匹配的函数包通常是很有用的。例如，写一个以结构（或其地址）为参数的显示函数比起每次要显示结构内容时写下一堆 printf() 语句要强得多。因为所有信息都在结构中，所以只需要一个参数，只需要重写函数，而不是改变函数调用。这在你需要修改结构的设计时是很方便的。
    联合的声明开启来很像结构的声明。然而，联合的成员共享一个存储空间，并且在一个时间只有一个成员可以存在于联合中。实质上，联合允许你创建用来保存一个类型不定的值的变量。
    enum 工具提供了定义符号常量的一种方法，typedef 工具提供了为基本类型或派生类型创建新标识符的一种方法。指向函数的指针提供了告诉函数应该使用哪个函数的一种方法。
