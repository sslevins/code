    用于存储程序数据的内存可用存储时期、作用域和链接来表征。存储时期可以是静态的、自动的或者分配的。如果是静态的，内存在程序执行开始时被分配，并在程序运行时一直存在。如果是自动的，变量所用内存在程序执行到该变量定义所在代码块时开始分配，在退出代码块时释放。如果是分配的内存，内存通过调用 malloc() （或其他相关函数）分配，通过调用函数 free() 释放。
    作用域决定了哪一部分程序可以访问某个变量。在所有函数之外定义的变量具有文件作用域，并对该变量声明之后定义的全部函数可见。在代码块内定义或者作为函数参数定义的变量具有代码块作用域，并只在该代码块及其子代码块中可见。
    链接描述了程序的某个单元定义的变量可被链接到其他某个地方。具有代码块作用域的变量作为局部变量，具有空链接。具有文件作用域的变量可以有内部链接或外部链接。内部链接意味着变量只可在包含变量定义的文件内部使用。外部链接意味着变量也可以在其他文件中使用。
    下面是 C 的 5 种存储类：
    自动----------------在一个代码块内（或在一个函数头部作为参数）声明的变量，无论有没有存储类修饰符 auto，都属于自动存储类。该类具有自动存储时期、代码块作用域和空链接。如未经初始化，它的值是不定的。
    寄存器--------------在一个代码块内（或在一个函数头部作为参数）使用存储类修饰副 register 声明的变量属于寄存器存储类。该类具有自动存储时期、代码块作用域和空链接，并且你无法获得其地址。把一个变量声明为寄存器变量可以指示编译器提供可用的最快访问。如未经初始化，它的值是不定的。
    静态、空链接--------在一个代码块内使用存储类修饰符 static 的变量属于静态空类见存储类。该类具有静态存储时期、代码块作用域和空链接，仅在编译时初始化一次。如未明确初始化，它的字节都被设定为 0。
    静态、外部链接------在所有函数外部定义、未使用存储类修饰符 static 的变量属于静态、内部链接存储类。该类具有静态存储时期、文件作用域和内部链接，仅在编译时初始化一次。如未明确初始化，它的字节都被设定为 0。
    静态、内部链接------在所有函数外部定义、使用存储类修饰副 static 的变量属于静态、内部链接存储类。该类具有静态存储时期、文件作用域和内部链接，仅在编译时初始化一次。如未明确初始化，它的字节都被设定为 0。
    分配内存是使用函数 malloc() （或其他相关的函数）提供的内存，该函数返回一个指向具有所请求字节数的内存块的指针。将这一内存块的地址作为参数开调用函数 free()，可以使该内存块重新可用。
    类型限定词说明副有 const、volatile 和 restrict。说明符 const 将数据限定为不变的。在使用指针时，const 可以表明指针本身不变或指针指向的数据不变，这取决于 const 在声明中的位置。说明副 volatile 表明数据除了可被程序修改外还可以通过其他方式修改，其目的是警示编译器在优化时不要作出相反的假设。说明符 restrict 也是为了优化而设置。由 restrict 限定的指针被认为是提供了对其指向的数据块的唯一访问途径。


key:

    C 提供了一些管理内存的模型。你因该熟悉这些不同的选项。还需要培养什么时候选用什么类型的判断能力。大多数情况下，自动变量是最佳选择。如果决定使用另一个类型，应该有一个充足的理由。通常，用自动变量、函数参数和返回值在函数间传递数据比使用全局变量更好一些。另一方面，全局变量对保持不变的数据非常有用。
    应该尽力理解静态内存、自动内存和分配内存的特性。具体地，要知道所需静态内存的数量在编译时就决定了，静态数据在程序载入内存时就被载入了内存。在程序运行时为自动变量分配和释放内存，因此在程序运行时，自动变量使用的内存数量会不断变化。可以把自动内存认为是一个可重写的工作区。分配的内存也会增加和减少，但这个过程是由函数调用控制，而不是自动发生的。
